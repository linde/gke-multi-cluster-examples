---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      labels:
        app: webapp
    spec:
      nodeSelector:
        cloud.google.com/compute-class: "economy-compute-class"
      containers:
      - name: webapp-container
        image: python:3.8-slim
        args: ['sh', '-c', 'cd /mnt; pip -q install Flask prometheus-flask-exporter; flask run --host=0.0.0.0 --port=${PORT}']
        ports:
        - name: webapp
          containerPort: 8080
        env:
        - name: "PORT"
          value: "8080"
        resources:
          requests:
            cpu: "1" # make this high to force additional nodes
          limits:
            cpu: "1"
        volumeMounts:
        - name: webapp-config
          mountPath: /mnt/
      volumes:
      - name: webapp-config
        configMap:
          name: webapp-configmap
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: webapp-configmap
data:
  app.py: |
    import os
    import datetime, time

    from flask import Flask
    from prometheus_flask_exporter import PrometheusMetrics

    app = Flask(__name__)
    metrics = PrometheusMetrics(app)

    @app.route('/sleep/<int:sleepSeconds>')
    def sleep(sleepSeconds):
        time.sleep(sleepSeconds)
        return f'OK, slept {sleepSeconds} at {time.time()}'

    @app.route('/')
    def ok():
        return f'OK'
---
kind: Service
apiVersion: v1
metadata:
  name: webapp-service
spec:
  type: ClusterIP
  selector:
    app: webapp
  ports:
  - port: 8080
    targetPort: 8080
---
